{
    "docs": [
        {
            "location": "/",
            "text": "About Donkey\n\n\nDonkey is a high level self driving library written in Python and capable of \ncontrolling ackerman or differential drive vehicles. It was developed with a \nfocus on enabling fast experimentation and easy contribution.\n\n\nUse Donkey if you want to...\n\n\n Build your own small scale self driving car.\n\n Implement computer vision or neural network based auto-pilots.\n* Use an arbitrary number of sensors on your car. \n\n\nGuiding Developement Principles\n\n\n\n\n\n\nModularity\n: A self driving system is composed of standalone, \nindependently configurable modules that can be connected modules.\n\n\n\n\n\n\nMinimalism\n: Each component should be kept short (<100 lines of code). \nEach peice of code should be transparent apon first reading. No black magic, it slows the speed of innovation. \n\n\n\n\n\n\nExtensiblity\n: New components should be simple to create by following a \ntemplate. \n\n\n\n\n\n\nPython\n: Keep it simple. \n\n\n\n\n\n\nThese guidelines are nearly copied from \nKeras\n because they are so good\n \n\n\nGetting started in 30 seconds.\n\n\nRecord images from the camera\n\n\n\nimport donkey as dk\n\nV = dk.Vehicle()\n\n#add a camera\ncam = dk.parts.PiCamera()\nV.add(cam, outputs=['image'], threaded=True)\n\n#record the images\ninputs=['image']\ntypes=['image_array']\npath = '~/mydonkey/gettings_started'\ntub = dk.parts.Tub(path, inputs, types)\nV.add(tub, inputs=inputs)\n\n#start the drive loop\nV.start(max_loop_count=100)\n\n\n\n\nMore examples\n\n\nYou can find more examples in the examples folder.",
            "title": "Home"
        },
        {
            "location": "/#about-donkey",
            "text": "Donkey is a high level self driving library written in Python and capable of \ncontrolling ackerman or differential drive vehicles. It was developed with a \nfocus on enabling fast experimentation and easy contribution.  Use Donkey if you want to...   Build your own small scale self driving car.  Implement computer vision or neural network based auto-pilots.\n* Use an arbitrary number of sensors on your car.",
            "title": "About Donkey"
        },
        {
            "location": "/#guiding-developement-principles",
            "text": "Modularity : A self driving system is composed of standalone, \nindependently configurable modules that can be connected modules.    Minimalism : Each component should be kept short (<100 lines of code). \nEach peice of code should be transparent apon first reading. No black magic, it slows the speed of innovation.     Extensiblity : New components should be simple to create by following a \ntemplate.     Python : Keep it simple.     These guidelines are nearly copied from  Keras  because they are so good",
            "title": "Guiding Developement Principles"
        },
        {
            "location": "/#getting-started-in-30-seconds",
            "text": "",
            "title": "Getting started in 30 seconds."
        },
        {
            "location": "/#record-images-from-the-camera",
            "text": "import donkey as dk\n\nV = dk.Vehicle()\n\n#add a camera\ncam = dk.parts.PiCamera()\nV.add(cam, outputs=['image'], threaded=True)\n\n#record the images\ninputs=['image']\ntypes=['image_array']\npath = '~/mydonkey/gettings_started'\ntub = dk.parts.Tub(path, inputs, types)\nV.add(tub, inputs=inputs)\n\n#start the drive loop\nV.start(max_loop_count=100)",
            "title": "Record images from the camera"
        },
        {
            "location": "/#more-examples",
            "text": "You can find more examples in the examples folder.",
            "title": "More examples"
        },
        {
            "location": "/build_instructions/",
            "text": "Build a donkey vehicle.",
            "title": "Build a Car"
        },
        {
            "location": "/build_instructions/#build-a-donkey-vehicle",
            "text": "",
            "title": "Build a donkey vehicle."
        },
        {
            "location": "/about-parts/",
            "text": "About Donkey Parts\n\n\nParts are the modular components of a vehicle that are run in sequence in the\ndrive loop. These include ...\n\n Sensors - Cameras, Lidar, Odometers, GPS ...\n\n Actuators - Motor Controllers\n\n Pilots - Lane Detectors, Behavioral Cloning models, ...\n\n Controllers - Web based or bluetooth.\n* Stores - Tub, or a way to save data. \n\n\nAll Donkey Parts have a number of methods in common.\n\n \npart.run()\n : function used to run the part\n\n \npart.run_threaded(\n : drive loop function run if part is threaded.\n* \npart.update()\n : threaded function",
            "title": "Parts Overview"
        },
        {
            "location": "/about-parts/#about-donkey-parts",
            "text": "Parts are the modular components of a vehicle that are run in sequence in the\ndrive loop. These include ...  Sensors - Cameras, Lidar, Odometers, GPS ...  Actuators - Motor Controllers  Pilots - Lane Detectors, Behavioral Cloning models, ...  Controllers - Web based or bluetooth.\n* Stores - Tub, or a way to save data.   All Donkey Parts have a number of methods in common.   part.run()  : function used to run the part   part.run_threaded(  : drive loop function run if part is threaded.\n*  part.update()  : threaded function",
            "title": "About Donkey Parts"
        },
        {
            "location": "/actuators/",
            "text": "",
            "title": "Actuators"
        },
        {
            "location": "/stores/",
            "text": "Stores\n\n\nStores are components to save and retrieve data produced by other parts. \n\n\nTub\n\n\nThis is the standard donkey data store and it is modeled after the ROSBAG.\n\n\n\n\nTODO: The structure of the Tub part is not ideal and should be changed.\n\n\n\n\ntypes should not need to be specified and could be inspected and saved \non the first loop.\n\n\n\n\n\n\nExample creation \n\n\nimport donkey as dk\n\nT = dk.parts.Tub(path, inputs, types)\n\n\n\n\n\nAccepted Types\n\n\n\n\nfloat\n - saved as record\n\n\nint\n - saved as record",
            "title": "Stores"
        },
        {
            "location": "/stores/#stores",
            "text": "Stores are components to save and retrieve data produced by other parts.",
            "title": "Stores"
        },
        {
            "location": "/stores/#tub",
            "text": "This is the standard donkey data store and it is modeled after the ROSBAG.   TODO: The structure of the Tub part is not ideal and should be changed.   types should not need to be specified and could be inspected and saved \non the first loop.    Example creation   import donkey as dk\n\nT = dk.parts.Tub(path, inputs, types)",
            "title": "Tub"
        },
        {
            "location": "/stores/#accepted-types",
            "text": "float  - saved as record  int  - saved as record",
            "title": "Accepted Types"
        },
        {
            "location": "/contribute/",
            "text": "Contribute to Donkey\n\n\nDonkey is an opensource project to help accelerate the developement of \nself driving autos. See below how you can contribute. \n\n\nAdd a part.\n\n\nAre you a hardware specialist that can write a donkey part wrapper for a\nGPS unit or a data scientist that can write an recursive neural net autopilot?\nIf so please write a part so other people driving donkeys can use the part.\n\n\nFix or report a bug.\n\n\nIf you find a problem with the code and you know how to fix it then please\nclone the repo, make your fix, and submit your pull request.\n\n\nReply to issues.\n\n\nHelping close or triage the issues is a good way to help.\n\n\nNeed Inspiration?\n\n\nSearch the code or docs for \nTODO\n to find places where you might be able \nto find a better solution. \n\n\nImprove the documentation.\n\n\nYou can fix grammar or provide clarity by clicking the the \nEdit on GitHub\n \nlink in the top right corner.",
            "title": "Contribute"
        },
        {
            "location": "/contribute/#contribute-to-donkey",
            "text": "Donkey is an opensource project to help accelerate the developement of \nself driving autos. See below how you can contribute.",
            "title": "Contribute to Donkey"
        },
        {
            "location": "/contribute/#add-a-part",
            "text": "Are you a hardware specialist that can write a donkey part wrapper for a\nGPS unit or a data scientist that can write an recursive neural net autopilot?\nIf so please write a part so other people driving donkeys can use the part.",
            "title": "Add a part."
        },
        {
            "location": "/contribute/#fix-or-report-a-bug",
            "text": "If you find a problem with the code and you know how to fix it then please\nclone the repo, make your fix, and submit your pull request.",
            "title": "Fix or report a bug."
        },
        {
            "location": "/contribute/#reply-to-issues",
            "text": "Helping close or triage the issues is a good way to help.",
            "title": "Reply to issues."
        },
        {
            "location": "/contribute/#need-inspiration",
            "text": "Search the code or docs for  TODO  to find places where you might be able \nto find a better solution.",
            "title": "Need Inspiration?"
        },
        {
            "location": "/contribute/#improve-the-documentation",
            "text": "You can fix grammar or provide clarity by clicking the the  Edit on GitHub  \nlink in the top right corner.",
            "title": "Improve the documentation."
        },
        {
            "location": "/tests/",
            "text": "Tests\n\n\nThere is a limited test suite to ensure that the your changes to the code\ndon't break something unintended. \n\n\nRun all the tests\n\n\npython -m unittest\n\n\nOrganization\n\n\nThe test code is in \ntests\n foders in the same folder as the code. This is to\nhelp keep the test code linked to the code its self. If you change the code, \nchange the tests. :)\n\n\n\n\nTODO: Skip tests that require specific hardware.",
            "title": "Tests"
        },
        {
            "location": "/tests/#tests",
            "text": "There is a limited test suite to ensure that the your changes to the code\ndon't break something unintended.",
            "title": "Tests"
        },
        {
            "location": "/tests/#run-all-the-tests",
            "text": "python -m unittest",
            "title": "Run all the tests"
        },
        {
            "location": "/tests/#organization",
            "text": "The test code is in  tests  foders in the same folder as the code. This is to\nhelp keep the test code linked to the code its self. If you change the code, \nchange the tests. :)   TODO: Skip tests that require specific hardware.",
            "title": "Organization"
        }
    ]
}