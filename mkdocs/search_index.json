{
    "docs": [
        {
            "location": "/",
            "text": "About Donkey\n\n\nDonkey is a high level self driving library written in Python and capable of \ncontrolling ackerman or differential drive vehicles. It was developed with a \nfocus on enabling fast experimentation and easy contribution.\n\n\nUse Donkey if you want to...\n\n\n Build your own small scale self driving car.\n\n Implement computer vision or neural network based auto-pilots.\n* Use an arbitrary number of sensors on your car. \n\n\nGuiding Developement Principles\n\n\n\n\n\n\nModularity\n: A self driving system is composed of standalone, \nindependently configurable modules that can be connected modules.\n\n\n\n\n\n\nMinimalism\n: Each component should be kept short (<100 lines of code). \nEach peice of code should be transparent apon first reading. No black magic, it slows the speed of innovation. \n\n\n\n\n\n\nExtensiblity\n: New components should be simple to create by following a \ntemplate. \n\n\n\n\n\n\nPython\n: Keep it simple. \n\n\n\n\n\n\nThese guidelines are nearly copied from \nKeras\n because they are so good\n \n\n\nGetting started in 30 seconds.\n\n\nRecord images from the camera\n\n\n\nimport donkey as dk\n\nV = dk.Vehicle()\n\n#add a camera\ncam = dk.parts.PiCamera()\nV.add(cam, outputs=['image'], threaded=True)\n\n#record the images\ninputs=['image']\ntypes=['image_array']\npath = '~/mydonkey/gettings_started'\ntub = dk.parts.Tub(path, inputs, types)\nV.add(tub, inputs=inputs)\n\n#start the drive loop\nV.start(max_loop_count=100)\n\n\n\n\nMore examples\n\n\nYou can find more examples in the examples folder.",
            "title": "Home"
        },
        {
            "location": "/#about-donkey",
            "text": "Donkey is a high level self driving library written in Python and capable of \ncontrolling ackerman or differential drive vehicles. It was developed with a \nfocus on enabling fast experimentation and easy contribution.  Use Donkey if you want to...   Build your own small scale self driving car.  Implement computer vision or neural network based auto-pilots.\n* Use an arbitrary number of sensors on your car.",
            "title": "About Donkey"
        },
        {
            "location": "/#guiding-developement-principles",
            "text": "Modularity : A self driving system is composed of standalone, \nindependently configurable modules that can be connected modules.    Minimalism : Each component should be kept short (<100 lines of code). \nEach peice of code should be transparent apon first reading. No black magic, it slows the speed of innovation.     Extensiblity : New components should be simple to create by following a \ntemplate.     Python : Keep it simple.     These guidelines are nearly copied from  Keras  because they are so good",
            "title": "Guiding Developement Principles"
        },
        {
            "location": "/#getting-started-in-30-seconds",
            "text": "",
            "title": "Getting started in 30 seconds."
        },
        {
            "location": "/#record-images-from-the-camera",
            "text": "import donkey as dk\n\nV = dk.Vehicle()\n\n#add a camera\ncam = dk.parts.PiCamera()\nV.add(cam, outputs=['image'], threaded=True)\n\n#record the images\ninputs=['image']\ntypes=['image_array']\npath = '~/mydonkey/gettings_started'\ntub = dk.parts.Tub(path, inputs, types)\nV.add(tub, inputs=inputs)\n\n#start the drive loop\nV.start(max_loop_count=100)",
            "title": "Record images from the camera"
        },
        {
            "location": "/#more-examples",
            "text": "You can find more examples in the examples folder.",
            "title": "More examples"
        },
        {
            "location": "/build_instructions/",
            "text": "Build a donkey vehicle.\n\n\nThe standard hardware build instructions can be found in this \n\ngoogle doc\n.\n\n\nOnce you have the car built and the Raspbery Pi running with the given\ndisk image follow these steps to start running the latest version of Donkey. \n\n\nOn the Pi pull the most recent version.  \n\n\ngit fetch origin dev\nget checkout dev\n\n\n\n\nCalibrate your vehicle.\n\n\nThe goal of calibrating your vehicle is to make it run the same as other vehicles\nwhen given the same \nangle\n and \nthrottle\n values. For example if you give the\ncar an angle=0 and throttle=0 the wheels should point straight and the \nvehicle should not move.\n\n\nAssuming you've built the Donkey2 or your car uses the same motor controller \nyou can run \npython scripts/calibrate.py\n to find the right PWM settings for \nyour car. \n\n\nEnter the PWM values determined during your calibration into the \n\n\nDrive the car.\n\n\n put your car in a box or on blocks to avoid it running away \n\n\nAfter you've updated the script you use to drive your car with the correct \nPWM settings then you can run the script that will start your vehicles \ndrive loop. \n\n\npython examples/donkey2.py\n\n\n\n\n\n\nRun the drive script",
            "title": "Build a Car"
        },
        {
            "location": "/build_instructions/#build-a-donkey-vehicle",
            "text": "The standard hardware build instructions can be found in this  google doc .  Once you have the car built and the Raspbery Pi running with the given\ndisk image follow these steps to start running the latest version of Donkey.   On the Pi pull the most recent version.    git fetch origin dev\nget checkout dev",
            "title": "Build a donkey vehicle."
        },
        {
            "location": "/build_instructions/#calibrate-your-vehicle",
            "text": "The goal of calibrating your vehicle is to make it run the same as other vehicles\nwhen given the same  angle  and  throttle  values. For example if you give the\ncar an angle=0 and throttle=0 the wheels should point straight and the \nvehicle should not move.  Assuming you've built the Donkey2 or your car uses the same motor controller \nyou can run  python scripts/calibrate.py  to find the right PWM settings for \nyour car.   Enter the PWM values determined during your calibration into the",
            "title": "Calibrate your vehicle."
        },
        {
            "location": "/build_instructions/#drive-the-car",
            "text": "put your car in a box or on blocks to avoid it running away   After you've updated the script you use to drive your car with the correct \nPWM settings then you can run the script that will start your vehicles \ndrive loop.   python examples/donkey2.py   Run the drive script",
            "title": "Drive the car."
        },
        {
            "location": "/about-parts/",
            "text": "What is a Part\n\n\nA part python class that wraps a functional component of a vehicle. \nThese include: \n\n Sensors - Cameras, Lidar, Odometers, GPS ...\n\n Actuators - Motor Controllers\n\n Pilots - Lane Detectors, Behavioral Cloning models, ...\n\n Controllers - Web based or bluetooth.\n* Stores - Tub, or a way to save data. \n\n\nHere is an example how to use the PiCamera part to publish an image in the\n'cam/img' channel on every drive loop.\n\n\nV = dk.Vehicle()\n\n#initialize the camera part\ncam = dk.parts.PiCamera()\n\n#add the part to the vehicle.\nV.add(cam, outputs=['cam/img'])\n\nV.start()\n\n\n\n\nAnatomy of a Part\n\n\nAll parts share a common structure so that they can all be run by the vehicles\ndrive loop. Here is an example of a part that will accept a number, multiply \nit by a random number and return the result.\n\n\nimport random \n\nclass RandPercent:\n    def run(self, x):\n        return x * random.random()\n\n\n\n\nNow to add this to a vehicle:\n\n\nV = dk.Vehicle()\n\n#initialize the channel value\nV.mem['const'] = 4\n\n#add the part to read and write to the same channel.\nV.add(RandPercent, inputs=['const'], outputs=['cost'])\n\nV.start(max_loops=5)\n\n\n\n\nThreaded Parts\n\n\nFor a vehicle to perform well the drive loop must execute 10-30 times per\nsecond so slow parts should be threaded to avoid holding up the drive loop.\n\n\nA threaded part needs to define the function that runs in the separate thread\nand the function to call that will return the most recent values quickly. \n\n\nHere's an example how to make the RandPercent part threaded if the run\nfunction too a second to complete. \n\n\nimport random \nimport time\n\nclass RandPercent:\n    self.in = 0.\n    self.out = 0.\n    def run(self, x):\n        return x * random.random()\n        time.sleep(1)\n\n    def update(self):\n        #the funtion run in it's own thread\n        while True:\n            self.out = self.run(self.in)\n\n    def run_threaded(self, x):\n        self.in = x\n        return self.out\n\n\n\n\n\n\n\npart.run\n : function used to run the part\n\n\npart.run_threaded\n : drive loop function run if part is threaded.\n\n\npart.update\n : threaded function  \n\n\npart.shutdown",
            "title": "Parts Overview"
        },
        {
            "location": "/about-parts/#what-is-a-part",
            "text": "A part python class that wraps a functional component of a vehicle. \nThese include:   Sensors - Cameras, Lidar, Odometers, GPS ...  Actuators - Motor Controllers  Pilots - Lane Detectors, Behavioral Cloning models, ...  Controllers - Web based or bluetooth.\n* Stores - Tub, or a way to save data.   Here is an example how to use the PiCamera part to publish an image in the\n'cam/img' channel on every drive loop.  V = dk.Vehicle()\n\n#initialize the camera part\ncam = dk.parts.PiCamera()\n\n#add the part to the vehicle.\nV.add(cam, outputs=['cam/img'])\n\nV.start()",
            "title": "What is a Part"
        },
        {
            "location": "/about-parts/#anatomy-of-a-part",
            "text": "All parts share a common structure so that they can all be run by the vehicles\ndrive loop. Here is an example of a part that will accept a number, multiply \nit by a random number and return the result.  import random \n\nclass RandPercent:\n    def run(self, x):\n        return x * random.random()  Now to add this to a vehicle:  V = dk.Vehicle()\n\n#initialize the channel value\nV.mem['const'] = 4\n\n#add the part to read and write to the same channel.\nV.add(RandPercent, inputs=['const'], outputs=['cost'])\n\nV.start(max_loops=5)",
            "title": "Anatomy of a Part"
        },
        {
            "location": "/about-parts/#threaded-parts",
            "text": "For a vehicle to perform well the drive loop must execute 10-30 times per\nsecond so slow parts should be threaded to avoid holding up the drive loop.  A threaded part needs to define the function that runs in the separate thread\nand the function to call that will return the most recent values quickly.   Here's an example how to make the RandPercent part threaded if the run\nfunction too a second to complete.   import random \nimport time\n\nclass RandPercent:\n    self.in = 0.\n    self.out = 0.\n    def run(self, x):\n        return x * random.random()\n        time.sleep(1)\n\n    def update(self):\n        #the funtion run in it's own thread\n        while True:\n            self.out = self.run(self.in)\n\n    def run_threaded(self, x):\n        self.in = x\n        return self.out   part.run  : function used to run the part  part.run_threaded  : drive loop function run if part is threaded.  part.update  : threaded function    part.shutdown",
            "title": "Threaded Parts"
        },
        {
            "location": "/actuators/",
            "text": "",
            "title": "Actuators"
        },
        {
            "location": "/stores/",
            "text": "Stores\n\n\nStores are parts that record and replay vehicle data produced by other parts. \n\n\nTub\n\n\nThis is the standard donkey data store and it is modeled after the ROSBAG.\n\n\n\n\nTODO: The structure of the Tub part is not ideal and should be changed.\n\n\n\n\ntypes should not need to be specified and could be inspected and saved \non the first loop.\n\n\n\n\n\n\nExample creation \n\n\nimport donkey as dk\n\nT = dk.parts.Tub(path, inputs, types)\n\n\n\n\n\nAccepted Types\n\n\n\n\nfloat\n - saved as record\n\n\nint\n - saved as record",
            "title": "Stores"
        },
        {
            "location": "/stores/#stores",
            "text": "Stores are parts that record and replay vehicle data produced by other parts.",
            "title": "Stores"
        },
        {
            "location": "/stores/#tub",
            "text": "This is the standard donkey data store and it is modeled after the ROSBAG.   TODO: The structure of the Tub part is not ideal and should be changed.   types should not need to be specified and could be inspected and saved \non the first loop.    Example creation   import donkey as dk\n\nT = dk.parts.Tub(path, inputs, types)",
            "title": "Tub"
        },
        {
            "location": "/stores/#accepted-types",
            "text": "float  - saved as record  int  - saved as record",
            "title": "Accepted Types"
        },
        {
            "location": "/contribute/",
            "text": "Contribute to Donkey\n\n\nDonkey is an opensource project to help accelerate the developement of \nself driving autos. See below how you can contribute. \n\n\nAdd a part.\n\n\nAre you a hardware specialist that can write a donkey part wrapper for a\nGPS unit or a data scientist that can write an recursive neural net autopilot?\nIf so please write a part so other people driving donkeys can use the part.\n\n\nFix or report a bug.\n\n\nIf you find a problem with the code and you know how to fix it then please\nclone the repo, make your fix, and submit your pull request.\n\n\nReply to issues.\n\n\nHelping close or triage the issues is a good way to help.\n\n\nNeed Inspiration?\n\n\nSearch the code or docs for \nTODO\n to find places where you might be able \nto find a better solution. \n\n\nImprove the documentation.\n\n\nYou can fix grammar or provide clarity by clicking the the \nEdit on GitHub\n \nlink in the top right corner.",
            "title": "Contribute"
        },
        {
            "location": "/contribute/#contribute-to-donkey",
            "text": "Donkey is an opensource project to help accelerate the developement of \nself driving autos. See below how you can contribute.",
            "title": "Contribute to Donkey"
        },
        {
            "location": "/contribute/#add-a-part",
            "text": "Are you a hardware specialist that can write a donkey part wrapper for a\nGPS unit or a data scientist that can write an recursive neural net autopilot?\nIf so please write a part so other people driving donkeys can use the part.",
            "title": "Add a part."
        },
        {
            "location": "/contribute/#fix-or-report-a-bug",
            "text": "If you find a problem with the code and you know how to fix it then please\nclone the repo, make your fix, and submit your pull request.",
            "title": "Fix or report a bug."
        },
        {
            "location": "/contribute/#reply-to-issues",
            "text": "Helping close or triage the issues is a good way to help.",
            "title": "Reply to issues."
        },
        {
            "location": "/contribute/#need-inspiration",
            "text": "Search the code or docs for  TODO  to find places where you might be able \nto find a better solution.",
            "title": "Need Inspiration?"
        },
        {
            "location": "/contribute/#improve-the-documentation",
            "text": "You can fix grammar or provide clarity by clicking the the  Edit on GitHub  \nlink in the top right corner.",
            "title": "Improve the documentation."
        },
        {
            "location": "/tests/",
            "text": "Tests\n\n\nThere is a limited test suite to ensure that the your changes to the code\ndon't break something unintended. \n\n\nRun all the tests\n\n\npython -m unittest\n\n\nOrganization\n\n\nThe test code is in \ntests\n foders in the same folder as the code. This is to\nhelp keep the test code linked to the code its self. If you change the code, \nchange the tests. :)\n\n\n\n\nTODO: Skip tests that require specific hardware.",
            "title": "Tests"
        },
        {
            "location": "/tests/#tests",
            "text": "There is a limited test suite to ensure that the your changes to the code\ndon't break something unintended.",
            "title": "Tests"
        },
        {
            "location": "/tests/#run-all-the-tests",
            "text": "python -m unittest",
            "title": "Run all the tests"
        },
        {
            "location": "/tests/#organization",
            "text": "The test code is in  tests  foders in the same folder as the code. This is to\nhelp keep the test code linked to the code its self. If you change the code, \nchange the tests. :)   TODO: Skip tests that require specific hardware.",
            "title": "Organization"
        }
    ]
}